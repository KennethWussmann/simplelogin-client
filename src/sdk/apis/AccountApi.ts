/* eslint-disable */
// @ts-nocheck
type RequestCredentials = any;
type Response = any;
type RequestInit = any;
type FormData = any;
type WindowOrWorkerGlobalScope = any;
/* tslint:disable */
/* eslint-disable */
/**
 * SimpleLogin (unofficial)
 * The unofficial SimpleLogin API docs as OpenAPI 3.0.0 spec. This is based on the official markdown based docs, but written in OpenAPI to allow for easier integration with other tools and generation of client SDKs. Please do not contact the SimpleLogin team for support or issues with this API documentation.
 *
 * The version of the OpenAPI document: 4.22.0
 * Contact: contact@ketrwu.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthActivatePost,
  AuthForgotPasswordPost,
  AuthLogin,
  AuthLoginPost,
  AuthMfa,
  AuthMfaPost,
  AuthReactivatePost,
  AuthRegisterPost,
  Success,
  SudoPatch,
  UserApiKey,
  UserApiKeyPost,
  UserCookieToken,
  UserInfo,
  UserInfoPatch,
} from '../models';
import {
    AuthActivatePostFromJSON,
    AuthActivatePostToJSON,
    AuthForgotPasswordPostFromJSON,
    AuthForgotPasswordPostToJSON,
    AuthLoginFromJSON,
    AuthLoginToJSON,
    AuthLoginPostFromJSON,
    AuthLoginPostToJSON,
    AuthMfaFromJSON,
    AuthMfaToJSON,
    AuthMfaPostFromJSON,
    AuthMfaPostToJSON,
    AuthReactivatePostFromJSON,
    AuthReactivatePostToJSON,
    AuthRegisterPostFromJSON,
    AuthRegisterPostToJSON,
    SuccessFromJSON,
    SuccessToJSON,
    SudoPatchFromJSON,
    SudoPatchToJSON,
    UserApiKeyFromJSON,
    UserApiKeyToJSON,
    UserApiKeyPostFromJSON,
    UserApiKeyPostToJSON,
    UserCookieTokenFromJSON,
    UserCookieTokenToJSON,
    UserInfoFromJSON,
    UserInfoToJSON,
    UserInfoPatchFromJSON,
    UserInfoPatchToJSON,
} from '../models';

export interface ActivateAccountRequest {
    authActivatePost: AuthActivatePost;
}

export interface CreateApiKeyRequest {
    userApiKeyPost: UserApiKeyPost;
}

export interface EnableSudoModeRequest {
    sudoPatch: SudoPatch;
}

export interface ForgotPasswordRequest {
    authForgotPasswordPost: AuthForgotPasswordPost;
}

export interface LoginRequest {
    authLoginPost: AuthLoginPost;
}

export interface MfaRequest {
    authMfaPost: AuthMfaPost;
}

export interface ReactivateAccountRequest {
    authReactivatePost: AuthReactivatePost;
}

export interface RegisterAccountRequest {
    authRegisterPost: AuthRegisterPost;
}

export interface UpdateUserInfoRequest {
    userInfoPatch: UserInfoPatch;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Activate a new account with the activation code that was sent to the user\'s email.
     * Activate account
     */
    async activateAccountRaw(requestParameters: ActivateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authActivatePost === null || requestParameters.authActivatePost === undefined) {
            throw new runtime.RequiredError('authActivatePost','Required parameter requestParameters.authActivatePost was null or undefined when calling activateAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/activate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthActivatePostToJSON(requestParameters.authActivatePost),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Activate a new account with the activation code that was sent to the user\'s email.
     * Activate account
     */
    async activateAccount(requestParameters: ActivateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.activateAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new API key
     * Create API key
     */
    async createApiKeyRaw(requestParameters: CreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserApiKey>> {
        if (requestParameters.userApiKeyPost === null || requestParameters.userApiKeyPost === undefined) {
            throw new runtime.RequiredError('userApiKeyPost','Required parameter requestParameters.userApiKeyPost was null or undefined when calling createApiKey.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authentication"] = this.configuration.apiKey("Authentication"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/user/api_key`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserApiKeyPostToJSON(requestParameters.userApiKeyPost),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserApiKeyFromJSON(jsonValue));
    }

    /**
     * Create a new API key
     * Create API key
     */
    async createApiKey(requestParameters: CreateApiKeyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserApiKey> {
        const response = await this.createApiKeyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete user (requires sudo mode)
     * Delete user
     */
    async deleteUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authentication"] = this.configuration.apiKey("Authentication"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/user`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Delete user (requires sudo mode)
     * Delete user
     */
    async deleteUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.deleteUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Enable sudo mode
     * Enable sudo mode
     */
    async enableSudoModeRaw(requestParameters: EnableSudoModeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Success>> {
        if (requestParameters.sudoPatch === null || requestParameters.sudoPatch === undefined) {
            throw new runtime.RequiredError('sudoPatch','Required parameter requestParameters.sudoPatch was null or undefined when calling enableSudoMode.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authentication"] = this.configuration.apiKey("Authentication"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/sudo`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SudoPatchToJSON(requestParameters.sudoPatch),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SuccessFromJSON(jsonValue));
    }

    /**
     * Enable sudo mode
     * Enable sudo mode
     */
    async enableSudoMode(requestParameters: EnableSudoModeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Success> {
        const response = await this.enableSudoModeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request a link to reset the password for a registered account.
     * Forgot password
     */
    async forgotPasswordRaw(requestParameters: ForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authForgotPasswordPost === null || requestParameters.authForgotPasswordPost === undefined) {
            throw new runtime.RequiredError('authForgotPasswordPost','Required parameter requestParameters.authForgotPasswordPost was null or undefined when calling forgotPassword.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/forgot_password`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthForgotPasswordPostToJSON(requestParameters.authForgotPasswordPost),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request a link to reset the password for a registered account.
     * Forgot password
     */
    async forgotPassword(requestParameters: ForgotPasswordRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.forgotPasswordRaw(requestParameters, initOverrides);
    }

    /**
     * Get a one time use cookie to exchange it for a valid cookie in the web app
     * Get cookie token
     */
    async getCookieTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserCookieToken>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authentication"] = this.configuration.apiKey("Authentication"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/user/cookie_token`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserCookieTokenFromJSON(jsonValue));
    }

    /**
     * Get a one time use cookie to exchange it for a valid cookie in the web app
     * Get cookie token
     */
    async getCookieToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserCookieToken> {
        const response = await this.getCookieTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get user info
     * Get user info
     */
    async getUserInfoRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authentication"] = this.configuration.apiKey("Authentication"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/user_info`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * Get user info
     * Get user info
     */
    async getUserInfo(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo> {
        const response = await this.getUserInfoRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login using email and password to get an access token.
     * Login
     */
    async loginRaw(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthLogin>> {
        if (requestParameters.authLoginPost === null || requestParameters.authLoginPost === undefined) {
            throw new runtime.RequiredError('authLoginPost','Required parameter requestParameters.authLoginPost was null or undefined when calling login.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthLoginPostToJSON(requestParameters.authLoginPost),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthLoginFromJSON(jsonValue));
    }

    /**
     * Login using email and password to get an access token.
     * Login
     */
    async login(requestParameters: LoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthLogin> {
        const response = await this.loginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Log out user
     * Logout
     */
    async logoutRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authentication"] = this.configuration.apiKey("Authentication"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/logout`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * Log out user
     * Logout
     */
    async logout(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo> {
        const response = await this.logoutRaw(initOverrides);
        return await response.value();
    }

    /**
     * Authenticate using MFA
     * MFA authentication
     */
    async mfaRaw(requestParameters: MfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthMfa>> {
        if (requestParameters.authMfaPost === null || requestParameters.authMfaPost === undefined) {
            throw new runtime.RequiredError('authMfaPost','Required parameter requestParameters.authMfaPost was null or undefined when calling mfa.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/mfa`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthMfaPostToJSON(requestParameters.authMfaPost),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthMfaFromJSON(jsonValue));
    }

    /**
     * Authenticate using MFA
     * MFA authentication
     */
    async mfa(requestParameters: MfaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthMfa> {
        const response = await this.mfaRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Request a new activation code for an account that was already registered, but not activated yet.
     * Reactivate account
     */
    async reactivateAccountRaw(requestParameters: ReactivateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authReactivatePost === null || requestParameters.authReactivatePost === undefined) {
            throw new runtime.RequiredError('authReactivatePost','Required parameter requestParameters.authReactivatePost was null or undefined when calling reactivateAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/reactivate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthReactivatePostToJSON(requestParameters.authReactivatePost),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Request a new activation code for an account that was already registered, but not activated yet.
     * Reactivate account
     */
    async reactivateAccount(requestParameters: ReactivateAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.reactivateAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Register a new account
     * Register account
     */
    async registerAccountRaw(requestParameters: RegisterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.authRegisterPost === null || requestParameters.authRegisterPost === undefined) {
            throw new runtime.RequiredError('authRegisterPost','Required parameter requestParameters.authRegisterPost was null or undefined when calling registerAccount.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/auth/register`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRegisterPostToJSON(requestParameters.authRegisterPost),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Register a new account
     * Register account
     */
    async registerAccount(requestParameters: RegisterAccountRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.registerAccountRaw(requestParameters, initOverrides);
    }

    /**
     * Update user info
     * Update user info
     */
    async updateUserInfoRaw(requestParameters: UpdateUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserInfo>> {
        if (requestParameters.userInfoPatch === null || requestParameters.userInfoPatch === undefined) {
            throw new runtime.RequiredError('userInfoPatch','Required parameter requestParameters.userInfoPatch was null or undefined when calling updateUserInfo.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authentication"] = this.configuration.apiKey("Authentication"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/user_info`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UserInfoPatchToJSON(requestParameters.userInfoPatch),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserInfoFromJSON(jsonValue));
    }

    /**
     * Update user info
     * Update user info
     */
    async updateUserInfo(requestParameters: UpdateUserInfoRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserInfo> {
        const response = await this.updateUserInfoRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
