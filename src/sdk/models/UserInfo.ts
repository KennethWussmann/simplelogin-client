/* eslint-disable */
// @ts-nocheck
type RequestCredentials = any;
type Response = any;
type RequestInit = any;
type FormData = any;
type WindowOrWorkerGlobalScope = any;
/* tslint:disable */
/* eslint-disable */
/**
 * SimpleLogin (unofficial)
 * The unofficial SimpleLogin API docs as OpenAPI 3.0.0 spec. This is based on the official markdown based docs, but written in OpenAPI to allow for easier integration with other tools and generation of client SDKs. Please do not contact the SimpleLogin team for support or issues with this API documentation.
 *
 * The version of the OpenAPI document: 4.22.0
 * Contact: contact@ketrwu.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface UserInfo
 */
export interface UserInfo {
    /**
     * User's full name
     * @type {string}
     * @memberof UserInfo
     */
    name: string;
    /**
     * Email address
     * @type {string}
     * @memberof UserInfo
     */
    email: string;
    /**
     * Whether the user is a premium user or not
     * @type {boolean}
     * @memberof UserInfo
     */
    isPremium: boolean;
    /**
     * Whether the user is in trial period or not
     * @type {boolean}
     * @memberof UserInfo
     */
    inTrial: boolean;
    /**
     * URL of the user's profile picture
     * @type {string}
     * @memberof UserInfo
     */
    profilePicture: string;
    /**
     * 
     * @type {number}
     * @memberof UserInfo
     */
    maxAliasFreePlan: number;
}

/**
 * Check if a given object implements the UserInfo interface.
 */
export function instanceOfUserInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "isPremium" in value;
    isInstance = isInstance && "inTrial" in value;
    isInstance = isInstance && "profilePicture" in value;
    isInstance = isInstance && "maxAliasFreePlan" in value;

    return isInstance;
}

export function UserInfoFromJSON(json: any): UserInfo {
    return UserInfoFromJSONTyped(json, false);
}

export function UserInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'email': json['email'],
        'isPremium': json['is_premium'],
        'inTrial': json['in_trial'],
        'profilePicture': json['profile_picture'],
        'maxAliasFreePlan': json['max_alias_free_plan'],
    };
}

export function UserInfoToJSON(value?: UserInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'email': value.email,
        'is_premium': value.isPremium,
        'in_trial': value.inTrial,
        'profile_picture': value.profilePicture,
        'max_alias_free_plan': value.maxAliasFreePlan,
    };
}

