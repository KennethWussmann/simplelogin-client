/* eslint-disable */
// @ts-nocheck
/**
 * SimpleLogin (unofficial)
 * The unofficial SimpleLogin API docs as OpenAPI 3.0.0 spec. This is based on the official markdown based docs, but written in OpenAPI to allow for easier integration with other tools and generation of client SDKs. Please do not contact the SimpleLogin team for support or issues with this API documentation.
 *
 * OpenAPI spec version: 4.22.0
 * Contact: contact@ketrwu.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

export class AliasCustomNewPost {
    /**
    * The first part of the alias that user can choose.
    */
    'aliasPrefix': string;
    /**
    * One of the suffixes returned in the options endpoint.
    */
    'signedSuffix': string;
    'mailboxIds': Array<number>;
    /**
    * Note of this alias
    */
    'note'?: string;
    /**
    * Name of this alias
    */
    'name'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "aliasPrefix",
            "baseName": "alias_prefix",
            "type": "string",
            "format": ""
        },
        {
            "name": "signedSuffix",
            "baseName": "signed_suffix",
            "type": "string",
            "format": ""
        },
        {
            "name": "mailboxIds",
            "baseName": "mailbox_ids",
            "type": "Array<number>",
            "format": ""
        },
        {
            "name": "note",
            "baseName": "note",
            "type": "string",
            "format": ""
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return AliasCustomNewPost.attributeTypeMap;
    }

    public constructor() {
    }
}

