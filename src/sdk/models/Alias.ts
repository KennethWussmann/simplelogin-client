/* eslint-disable */
// @ts-nocheck
type RequestCredentials = any;
type Response = any;
type RequestInit = any;
type FormData = any;
type WindowOrWorkerGlobalScope = any;
/* tslint:disable */
/* eslint-disable */
/**
 * SimpleLogin (unofficial)
 * The unofficial SimpleLogin API docs as OpenAPI 3.0.0 spec. This is based on the official markdown based docs, but written in OpenAPI to allow for easier integration with other tools and generation of client SDKs. Please do not contact the SimpleLogin team for support or issues with this API documentation.
 *
 * The version of the OpenAPI document: 4.22.0
 * Contact: contact@ketrwu.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AliasLatestActivity } from './AliasLatestActivity';
import {
    AliasLatestActivityFromJSON,
    AliasLatestActivityFromJSONTyped,
    AliasLatestActivityToJSON,
} from './AliasLatestActivity';
import type { MailboxModelRef } from './MailboxModelRef';
import {
    MailboxModelRefFromJSON,
    MailboxModelRefFromJSONTyped,
    MailboxModelRefToJSON,
} from './MailboxModelRef';

/**
 * 
 * @export
 * @interface Alias
 */
export interface Alias {
    /**
     * 
     * @type {Date}
     * @memberof Alias
     */
    creationDate: Date;
    /**
     * 
     * @type {number}
     * @memberof Alias
     */
    creationTimestamp: number;
    /**
     * Email address
     * @type {string}
     * @memberof Alias
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof Alias
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof Alias
     */
    enabled: boolean;
    /**
     * 
     * @type {number}
     * @memberof Alias
     */
    id: number;
    /**
     * 
     * @type {MailboxModelRef}
     * @memberof Alias
     */
    mailbox: MailboxModelRef;
    /**
     * 
     * @type {Array<MailboxModelRef>}
     * @memberof Alias
     */
    mailboxes: Array<MailboxModelRef>;
    /**
     * 
     * @type {AliasLatestActivity}
     * @memberof Alias
     */
    latestActivity: AliasLatestActivity;
    /**
     * 
     * @type {number}
     * @memberof Alias
     */
    nbBlock: number;
    /**
     * 
     * @type {number}
     * @memberof Alias
     */
    nbForward: number;
    /**
     * 
     * @type {number}
     * @memberof Alias
     */
    nbReply: number;
    /**
     * 
     * @type {string}
     * @memberof Alias
     */
    note: string;
    /**
     * 
     * @type {boolean}
     * @memberof Alias
     */
    pinned: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Alias
     */
    disablePgp: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Alias
     */
    supportPgp: boolean;
}

/**
 * Check if a given object implements the Alias interface.
 */
export function instanceOfAlias(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "creationDate" in value;
    isInstance = isInstance && "creationTimestamp" in value;
    isInstance = isInstance && "email" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "enabled" in value;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "mailbox" in value;
    isInstance = isInstance && "mailboxes" in value;
    isInstance = isInstance && "latestActivity" in value;
    isInstance = isInstance && "nbBlock" in value;
    isInstance = isInstance && "nbForward" in value;
    isInstance = isInstance && "nbReply" in value;
    isInstance = isInstance && "note" in value;
    isInstance = isInstance && "pinned" in value;
    isInstance = isInstance && "disablePgp" in value;
    isInstance = isInstance && "supportPgp" in value;

    return isInstance;
}

export function AliasFromJSON(json: any): Alias {
    return AliasFromJSONTyped(json, false);
}

export function AliasFromJSONTyped(json: any, ignoreDiscriminator: boolean): Alias {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'creationDate': (new Date(json['creation_date'])),
        'creationTimestamp': json['creation_timestamp'],
        'email': json['email'],
        'name': json['name'],
        'enabled': json['enabled'],
        'id': json['id'],
        'mailbox': MailboxModelRefFromJSON(json['mailbox']),
        'mailboxes': ((json['mailboxes'] as Array<any>).map(MailboxModelRefFromJSON)),
        'latestActivity': AliasLatestActivityFromJSON(json['latest_activity']),
        'nbBlock': json['nb_block'],
        'nbForward': json['nb_forward'],
        'nbReply': json['nb_reply'],
        'note': json['note'],
        'pinned': json['pinned'],
        'disablePgp': json['disable_pgp'],
        'supportPgp': json['support_pgp'],
    };
}

export function AliasToJSON(value?: Alias | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'creation_date': (value.creationDate.toISOString()),
        'creation_timestamp': value.creationTimestamp,
        'email': value.email,
        'name': value.name,
        'enabled': value.enabled,
        'id': value.id,
        'mailbox': MailboxModelRefToJSON(value.mailbox),
        'mailboxes': ((value.mailboxes as Array<any>).map(MailboxModelRefToJSON)),
        'latest_activity': AliasLatestActivityToJSON(value.latestActivity),
        'nb_block': value.nbBlock,
        'nb_forward': value.nbForward,
        'nb_reply': value.nbReply,
        'note': value.note,
        'pinned': value.pinned,
        'disable_pgp': value.disablePgp,
        'support_pgp': value.supportPgp,
    };
}

